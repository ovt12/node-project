import { readFileSync, writeFileSync } from "fs";
import { List } from "../models/list.js";
import { Op } from "sequelize";
// ADD USERS
export const addLists = async (req, res) => {
  // TRY AND CREATE A NEW LIST
  try {
    const list = await List.create(req.body);
    // RETURN THE AUTOGENERATED ID FROM DB
    res.status(201).send({ data: `List ID: ${list.id} created` });
  } catch (error) {
    // IF THERE IS AN ERROR WE WILL SEND BACK THE MESAGE
    res.status(403).send(error.message);
  }
};

// GET USERS
export const getLists = async (req, res) => {
  const { task, priority, created_by } = req.query;
  
  const query = { where: {} };

  if (task) {
    query.where.task = { [Op.like]: `%${task}%` };
  }
  if (priority) {
    query.where.priority = { [Op.eq]: priority };
  }

  if (created_by) {
    query.where.created_by = { [Op.like]: `%${created_by}%` };
  }

  try {
    const list = await List.findAll(query);
    res.send(list);
  } catch (error) {
    res.status(404).send(error.message);
  }
};

// MATCH LIST

export const matchLists = async (req, res) => {
  const id = parseInt(req.params.id);
  try {
    const list = await List.findByPk(id);
    if (list === null) {
      throw new Error("List not found");
    }
    res.send(list);
  } catch (error) {
    res.status(404).send(error.message);
  }
};

// UPDATE LIST

export const updateListById = async (req, res) => {
  const id = parseInt(req.params.id);
  try {
    const list = await List.update(req.body, {
      where: {
        id: id,
      },
    });

    if (list[0] === 0) {
      throw new Error("List not found");
    }
    res.send("This List has been updated");
  } catch (error) {
    res.status(404).send(error.message);
  }
};

// DELETE LIST

export const deleteLists = async (req, res) => {
  const id = parseInt(req.params.id);

  try {
    const list = await List.destroy({
      where: {
        id: id,
      },
    });
    if (!list) {
      throw new Error("List not found");
    }
    res.status(204).send("LIST DESTROYED BOOM");
  } catch (error) {
    res.status(404).send(error.message);
  }
};
